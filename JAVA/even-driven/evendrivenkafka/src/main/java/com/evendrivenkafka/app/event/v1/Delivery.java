/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.evendrivenkafka.app.event.v1;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Delivery extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3394655238333847013L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Delivery\",\"namespace\":\"com.evendrivenkafka.app.event.v1\",\"fields\":[{\"name\":\"name\",\"type\":[\"string\"]},{\"name\":\"id\",\"type\":[\"int\"]},{\"name\":\"created\",\"type\":[\"int\",\"null\"]},{\"name\":\"finished\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Delivery> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Delivery> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Delivery> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Delivery> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Delivery> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Delivery to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Delivery from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Delivery instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Delivery fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Object name;
  private java.lang.Object id;
  private java.lang.Integer created;
  private java.lang.CharSequence finished;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Delivery() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param id The new value for id
   * @param created The new value for created
   * @param finished The new value for finished
   */
  public Delivery(java.lang.Object name, java.lang.Object id, java.lang.Integer created, java.lang.CharSequence finished) {
    this.name = name;
    this.id = id;
    this.created = created;
    this.finished = finished;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return id;
    case 2: return created;
    case 3: return finished;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = value$; break;
    case 1: id = value$; break;
    case 2: created = (java.lang.Integer)value$; break;
    case 3: finished = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.Object getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.Object value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Object getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Object value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'created' field.
   * @return The value of the 'created' field.
   */
  public java.lang.Integer getCreated() {
    return created;
  }


  /**
   * Sets the value of the 'created' field.
   * @param value the value to set.
   */
  public void setCreated(java.lang.Integer value) {
    this.created = value;
  }

  /**
   * Gets the value of the 'finished' field.
   * @return The value of the 'finished' field.
   */
  public java.lang.CharSequence getFinished() {
    return finished;
  }


  /**
   * Sets the value of the 'finished' field.
   * @param value the value to set.
   */
  public void setFinished(java.lang.CharSequence value) {
    this.finished = value;
  }

  /**
   * Creates a new Delivery RecordBuilder.
   * @return A new Delivery RecordBuilder
   */
  public static com.evendrivenkafka.app.event.v1.Delivery.Builder newBuilder() {
    return new com.evendrivenkafka.app.event.v1.Delivery.Builder();
  }

  /**
   * Creates a new Delivery RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Delivery RecordBuilder
   */
  public static com.evendrivenkafka.app.event.v1.Delivery.Builder newBuilder(com.evendrivenkafka.app.event.v1.Delivery.Builder other) {
    if (other == null) {
      return new com.evendrivenkafka.app.event.v1.Delivery.Builder();
    } else {
      return new com.evendrivenkafka.app.event.v1.Delivery.Builder(other);
    }
  }

  /**
   * Creates a new Delivery RecordBuilder by copying an existing Delivery instance.
   * @param other The existing instance to copy.
   * @return A new Delivery RecordBuilder
   */
  public static com.evendrivenkafka.app.event.v1.Delivery.Builder newBuilder(com.evendrivenkafka.app.event.v1.Delivery other) {
    if (other == null) {
      return new com.evendrivenkafka.app.event.v1.Delivery.Builder();
    } else {
      return new com.evendrivenkafka.app.event.v1.Delivery.Builder(other);
    }
  }

  /**
   * RecordBuilder for Delivery instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Delivery>
    implements org.apache.avro.data.RecordBuilder<Delivery> {

    private java.lang.Object name;
    private java.lang.Object id;
    private java.lang.Integer created;
    private java.lang.CharSequence finished;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.evendrivenkafka.app.event.v1.Delivery.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.created)) {
        this.created = data().deepCopy(fields()[2].schema(), other.created);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.finished)) {
        this.finished = data().deepCopy(fields()[3].schema(), other.finished);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Delivery instance
     * @param other The existing instance to copy.
     */
    private Builder(com.evendrivenkafka.app.event.v1.Delivery other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.created)) {
        this.created = data().deepCopy(fields()[2].schema(), other.created);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.finished)) {
        this.finished = data().deepCopy(fields()[3].schema(), other.finished);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.Object getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.evendrivenkafka.app.event.v1.Delivery.Builder setName(java.lang.Object value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.evendrivenkafka.app.event.v1.Delivery.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Object getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.evendrivenkafka.app.event.v1.Delivery.Builder setId(java.lang.Object value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.evendrivenkafka.app.event.v1.Delivery.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'created' field.
      * @return The value.
      */
    public java.lang.Integer getCreated() {
      return created;
    }


    /**
      * Sets the value of the 'created' field.
      * @param value The value of 'created'.
      * @return This builder.
      */
    public com.evendrivenkafka.app.event.v1.Delivery.Builder setCreated(java.lang.Integer value) {
      validate(fields()[2], value);
      this.created = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'created' field has been set.
      * @return True if the 'created' field has been set, false otherwise.
      */
    public boolean hasCreated() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'created' field.
      * @return This builder.
      */
    public com.evendrivenkafka.app.event.v1.Delivery.Builder clearCreated() {
      created = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'finished' field.
      * @return The value.
      */
    public java.lang.CharSequence getFinished() {
      return finished;
    }


    /**
      * Sets the value of the 'finished' field.
      * @param value The value of 'finished'.
      * @return This builder.
      */
    public com.evendrivenkafka.app.event.v1.Delivery.Builder setFinished(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.finished = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'finished' field has been set.
      * @return True if the 'finished' field has been set, false otherwise.
      */
    public boolean hasFinished() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'finished' field.
      * @return This builder.
      */
    public com.evendrivenkafka.app.event.v1.Delivery.Builder clearFinished() {
      finished = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Delivery build() {
      try {
        Delivery record = new Delivery();
        record.name = fieldSetFlags()[0] ? this.name :  defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id :  defaultValue(fields()[1]);
        record.created = fieldSetFlags()[2] ? this.created : (java.lang.Integer) defaultValue(fields()[2]);
        record.finished = fieldSetFlags()[3] ? this.finished : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Delivery>
    WRITER$ = (org.apache.avro.io.DatumWriter<Delivery>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Delivery>
    READER$ = (org.apache.avro.io.DatumReader<Delivery>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










