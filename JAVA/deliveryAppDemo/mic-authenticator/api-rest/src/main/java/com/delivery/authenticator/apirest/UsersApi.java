/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.delivery.authenticator.apirest;

import com.delivery.authenticator.apirest.dto.ErrorDTO;
import java.util.List;
import com.delivery.authenticator.apirest.dto.UserDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-26T21:20:25.951518600+01:00[Europe/Paris]")

@Validated
@Api(value = "users", description = "the users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "User delete per ID", nickname = "delete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Usuario eliminado correctamente"),
        @ApiResponse(code = 404, message = "Usuario no encontrado") })
    @RequestMapping(value = "/users/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> delete(@ApiParam(value = "ID del usuario",required=true) @PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Obtener un usuario por ID", nickname = "getUser", notes = "", response = UserDTO.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieve user", response = UserDTO.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<UserDTO>> getUser(@ApiParam(value = "ID del usuario",required=true) @PathVariable("id") Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"password\" : \"MyPassord222\",  \"address\" : \"Avendia de la zarzuela\",  \"mail\" : \"garofolo.leonel@gmail.com\",  \"phone\" : \"+00 6656545\",  \"postalCode\" : \"28007\",  \"name\" : \"Francisco Martín\",  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Find a collection of users", nickname = "getUsers", notes = "", response = UserDTO.class, responseContainer = "List", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieve users", response = UserDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "BadRequest", response = ErrorDTO.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ErrorDTO.class),
        @ApiResponse(code = 503, message = "Service unavailable", response = ErrorDTO.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<UserDTO>> getUsers() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"password\" : \"MyPassord222\",  \"address\" : \"Avendia de la zarzuela\",  \"mail\" : \"garofolo.leonel@gmail.com\",  \"phone\" : \"+00 6656545\",  \"postalCode\" : \"28007\",  \"name\" : \"Francisco Martín\",  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Actualizar un usuario por ID", nickname = "usersIdPut", notes = "", response = UserDTO.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Usuario actualizado correctamente", response = UserDTO.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Usuario no encontrado") })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<List<UserDTO>> usersIdPut(@ApiParam(value = "ID del usuario",required=true) @PathVariable("id") Integer id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody List<UserDTO> userDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"password\" : \"MyPassord222\",  \"address\" : \"Avendia de la zarzuela\",  \"mail\" : \"garofolo.leonel@gmail.com\",  \"phone\" : \"+00 6656545\",  \"postalCode\" : \"28007\",  \"name\" : \"Francisco Martín\",  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
